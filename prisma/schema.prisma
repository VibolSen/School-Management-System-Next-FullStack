generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

enum Role {
  ADMIN
  HR
  FACULTY
  TEACHER
  STUDENT
}

enum SubmissionStatus {
  PENDING
  SUBMITTED
  GRADED
}

enum ExamSubmissionStatus {
  PENDING
  SUBMITTED
  GRADED
}

model User {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  firstName String
  lastName  String
  email     String   @unique
  password  String
  role      Role     @default(STUDENT)

  groups           Group[]      @relation(fields: [groupIds], references: [id])
  groupIds         String[]     @db.ObjectId
  ledCourses       Course[]     @relation("CourseLead")
  headedDepartment Department?  @relation("DepartmentHead")

  createdAssignments Assignment[] @relation("AssignmentsCreated")
  submissions        Submission[] @relation("SubmissionsMade")

  createdExams   Exam[]           @relation("ExamsCreated")
  examSubmissions ExamSubmission[] @relation("ExamSubmissionsMade")

  uploadedResources LibraryResource[] @relation("UploadedResources")
  borrowedResources LibraryResource[] @relation("BorrowedResources")
}

model LibraryResource {
  id           String  @id @default(auto()) @map("_id") @db.ObjectId
  title        String
  author       String
  coverImage   String
  uploadedBy   User    @relation("UploadedResources", fields: [uploadedById], references: [id])
  uploadedById String  @db.ObjectId
  borrowedBy   User?   @relation("BorrowedResources", fields: [borrowedById], references: [id])
  borrowedById String? @db.ObjectId
}

model Department {
  id      String  @id @default(auto()) @map("_id") @db.ObjectId
  name    String  @unique
  courses Course[]
  head    User?   @relation("DepartmentHead", fields: [headId], references: [id])
  headId  String? @db.ObjectId @unique
}

model Course {
  id           String     @id @default(auto()) @map("_id") @db.ObjectId
  name         String     @unique
  department   Department @relation(fields: [departmentId], references: [id])
  departmentId String     @db.ObjectId
  groups       Group[]
  teacher      User?      @relation("CourseLead", fields: [teacherId], references: [id])
  teacherId    String?    @db.ObjectId
}

model Group {
  id   String @id @default(auto()) @map("_id") @db.ObjectId
  name String @unique

  course     Course?    @relation(fields: [courseId], references: [id])
  courseId   String?    @db.ObjectId
  students   User[]     @relation(fields: [studentIds], references: [id])
  studentIds String[]   @db.ObjectId

  assignments Assignment[]
  exams       Exam[]
}

model Assignment {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  title       String
  description String?
  dueDate     DateTime?

  teacher      User         @relation("AssignmentsCreated", fields: [teacherId], references: [id])
  teacherId    String       @db.ObjectId
  group        Group        @relation(fields: [groupId], references: [id])
  groupId      String       @db.ObjectId
  submissions  Submission[]
}

model Submission {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  content     String?
  submittedAt DateTime?
  grade       Int?
  feedback    String?

  status SubmissionStatus @default(PENDING)

  assignment   Assignment @relation(fields: [assignmentId], references: [id])
  assignmentId String     @db.ObjectId
  student      User       @relation("SubmissionsMade", fields: [studentId], references: [id])
  studentId    String     @db.ObjectId

  @@unique([assignmentId, studentId])
}

model Exam {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  title       String
  description String?
  examDate    DateTime?

  teacher   User           @relation("ExamsCreated", fields: [teacherId], references: [id])
  teacherId String         @db.ObjectId
  group     Group          @relation(fields: [groupId], references: [id])
  groupId   String         @db.ObjectId
  submissions ExamSubmission[]
}

model ExamSubmission {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  content     String?
  submittedAt DateTime?
  grade       Int?
  feedback    String?

  status ExamSubmissionStatus @default(PENDING)

  exam      Exam   @relation(fields: [examId], references: [id])
  examId    String @db.ObjectId
  student   User   @relation("ExamSubmissionsMade", fields: [studentId], references: [id])
  studentId String @db.ObjectId

  @@unique([examId, studentId])
}