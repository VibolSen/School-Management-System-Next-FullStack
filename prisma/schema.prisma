generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

enum Role {
  ADMIN
  HR
  FACULTY
  TEACHER
  STUDENT
}

enum SubmissionStatus {
  PENDING
  SUBMITTED
  GRADED
}

enum ExamSubmissionStatus {
  PENDING
  SUBMITTED
  GRADED
}

model User {
  id        String @id @default(auto()) @map("_id") @db.ObjectId
  firstName String
  lastName  String
  email     String @unique
  password  String
  role      Role   @default(STUDENT)

  department   Department? @relation(fields: [departmentId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  departmentId String?     @db.ObjectId

  groups           Group[]     @relation(fields: [groupIds], references: [id])
  groupIds         String[]    @db.ObjectId
  ledCourses       Course[]    @relation("CourseLead")
  headedDepartment Department? @relation("DepartmentHead")

  createdAssignments Assignment[] @relation("AssignmentsCreated")
  submissions        Submission[] @relation("SubmissionsMade")

  createdExams    Exam[]           @relation("ExamsCreated")
  examSubmissions ExamSubmission[] @relation("ExamSubmissionsMade")

  uploadedResources LibraryResource[] @relation("UploadedResources")
  attendances       Attendance[]
}

model LibraryResource {
  id              String  @id @default(auto()) @map("_id") @db.ObjectId
  title           String
  author          String
  coverImage      String
  uploadedBy      User    @relation("UploadedResources", fields: [uploadedById], references: [id])
  uploadedById    String  @db.ObjectId
  department      String?
  description     String?
  publicationYear Int?
}

model Department {
  id      String   @id @default(auto()) @map("_id") @db.ObjectId
  name    String   @unique
  courses Course[]
  users   User[]
  head    User?    @relation("DepartmentHead", fields: [headId], references: [id])
  headId  String?  @unique @db.ObjectId
}

model Course {
  id             String          @id @default(auto()) @map("_id") @db.ObjectId
  name           String          @unique
  department     Department      @relation(fields: [departmentId], references: [id])
  departmentId   String          @db.ObjectId
  groups         Group[]
  teacher        User?           @relation("CourseLead", fields: [teacherId], references: [id])
  teacherId      String?         @db.ObjectId
  attendances    Attendance[]
}

model Group {
  id   String @id @default(auto()) @map("_id") @db.ObjectId
  name String @unique

  course     Course?  @relation(fields: [courseId], references: [id])
  courseId   String?  @db.ObjectId
  students   User[]   @relation(fields: [studentIds], references: [id])
  studentIds String[] @db.ObjectId

  assignments Assignment[]
  exams       Exam[]
}

model Assignment {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  title       String
  description String?
  dueDate     DateTime?

  teacher     User         @relation("AssignmentsCreated", fields: [teacherId], references: [id])
  teacherId   String       @db.ObjectId
  group       Group        @relation(fields: [groupId], references: [id])
  groupId     String       @db.ObjectId
  submissions Submission[]
}

model Submission {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  content     String?
  submittedAt DateTime?
  grade       Int?
  feedback    String?

  status SubmissionStatus @default(PENDING)

  assignment   Assignment @relation(fields: [assignmentId], references: [id])
  assignmentId String     @db.ObjectId
  student      User       @relation("SubmissionsMade", fields: [studentId], references: [id])
  studentId    String     @db.ObjectId

  @@unique([assignmentId, studentId])
}

model Exam {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  title       String
  description String?
  examDate    DateTime?

  teacher     User             @relation("ExamsCreated", fields: [teacherId], references: [id])
  teacherId   String           @db.ObjectId
  group       Group            @relation(fields: [groupId], references: [id])
  groupId     String           @db.ObjectId
  submissions ExamSubmission[]
}

model ExamSubmission {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  content     String?
  submittedAt DateTime?
  grade       Int?
  feedback    String?

  status ExamSubmissionStatus @default(PENDING)

  exam      Exam   @relation(fields: [examId], references: [id])
  examId    String @db.ObjectId
  student   User   @relation("ExamSubmissionsMade", fields: [studentId], references: [id])
  studentId String @db.ObjectId

  @@unique([examId, studentId])
}

model AttendanceStatus {
  id          String       @id @default(auto()) @map("_id") @db.ObjectId
  name        String       @unique
  attendances Attendance[]
}

model Attendance {
  id       String           @id @default(auto()) @map("_id") @db.ObjectId
  user     User             @relation(fields: [userId], references: [id])
  userId   String           @db.ObjectId
  course   Course?          @relation(fields: [courseId], references: [id])
  courseId String?          @db.ObjectId
  status   AttendanceStatus @relation(fields: [statusId], references: [id])
  statusId String           @db.ObjectId
  date     DateTime
  checkIn  DateTime?
  checkOut DateTime?

  staffAttendanceSession   StaffAttendanceSession? @relation(fields: [staffAttendanceSessionId], references: [id])
  staffAttendanceSessionId String?                 @db.ObjectId

  @@unique([userId, courseId, date])
}

model StaffAttendanceSession {
  id          String       @id @default(auto()) @map("_id") @db.ObjectId
  expiresAt   DateTime
  attendances Attendance[]
}