generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

enum Role {
  ADMIN
  HR
  FACULTY
  TEACHER
  STUDENT
}

enum SubmissionStatus {
  PENDING
  SUBMITTED
  GRADED
}

enum ExamSubmissionStatus {
  PENDING
  SUBMITTED
  GRADED
}

enum AttendanceStatus {
  PRESENT
  ABSENT
  LATE
}

model Attendance {
  id        String    @id @default(auto()) @map("_id") @db.ObjectId
  date      DateTime
  status    AttendanceStatus
  student   User      @relation(fields: [studentId], references: [id])
  studentId String    @db.ObjectId
  group     Group     @relation(fields: [groupId], references: [id])
  groupId   String    @db.ObjectId

  @@unique([date, studentId, groupId], name: "attendance_unique")
}

model User {
  id        String @id @default(auto()) @map("_id") @db.ObjectId
  firstName String
  lastName  String
  email     String @unique
  password  String
  role      Role   @default(STUDENT)

  department   Department? @relation(fields: [departmentId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  departmentId String?     @db.ObjectId

  groups           Group[]     @relation(fields: [groupIds], references: [id])
  groupIds         String[]    @db.ObjectId
  ledCourses       Course[]    @relation("CourseLead")
  headedDepartments Department[] @relation("DepartmentHead")

  createdAssignments Assignment[] @relation("AssignmentsCreated")
  submissions        Submission[] @relation("SubmissionsMade")

  createdExams    Exam[]           @relation("ExamsCreated")
  examSubmissions ExamSubmission[] @relation("ExamSubmissionsMade")

  uploadedResources LibraryResource[] @relation("UploadedResources")

  // ✅ Back relation for Enrollment
  enrollments Enrollment[]
  attendances Attendance[]

  createdSchedules           Schedule[] @relation("SchedulesCreated")
  schedulesAssignedToTeacher Schedule[] @relation("SchedulesAssignedToTeacher")
}

model LibraryResource {
  id              String  @id @default(auto()) @map("_id") @db.ObjectId
  title           String
  author          String
  coverImage      String
  uploadedBy      User    @relation("UploadedResources", fields: [uploadedById], references: [id])
  uploadedById    String  @db.ObjectId
  department      String?
  description     String?
  publicationYear Int?
}

model Department {
  id      String   @id @default(auto()) @map("_id") @db.ObjectId
  name    String   @unique
  courses Course[]
  users   User[]
  head    User?    @relation("DepartmentHead", fields: [headId], references: [id])
  headId  String?  @db.ObjectId
}

model Course {
  id           String       @id @default(auto()) @map("_id") @db.ObjectId
  name         String       @unique
  department   Department   @relation(fields: [departmentId], references: [id])
  departmentId String       @db.ObjectId
  groups       Group[]      @relation("CourseToGroup", fields: [groupIds], references: [id])
  groupIds     String[]     @db.ObjectId
  teacher      User?        @relation("CourseLead", fields: [teacherId], references: [id])
  teacherId    String?      @db.ObjectId

  // ✅ Back relation for Enrollment
  enrollments Enrollment[]
}

model Group {
  id   String @id @default(auto()) @map("_id") @db.ObjectId
  name String @unique

  courses    Course[] @relation("CourseToGroup", fields: [courseIds], references: [id])
  courseIds  String[] @db.ObjectId
  students   User[]   @relation(fields: [studentIds], references: [id])
  studentIds String[] @db.ObjectId

  assignments Assignment[]
  exams       Exam[]
  attendances Attendance[]
  schedules   Schedule[] @relation("SchedulesAssignedToGroup")
}

model Assignment {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  title       String
  description String?
  dueDate     DateTime?

  teacher     User         @relation("AssignmentsCreated", fields: [teacherId], references: [id])
  teacherId   String       @db.ObjectId
  group       Group        @relation(fields: [groupId], references: [id])
  groupId     String       @db.ObjectId
  submissions Submission[]
}

model Submission {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  content     String?
  submittedAt DateTime?
  grade       Int?
  feedback    String?

  status SubmissionStatus @default(PENDING)

  assignment   Assignment @relation(fields: [assignmentId], references: [id])
  assignmentId String     @db.ObjectId
  student      User       @relation("SubmissionsMade", fields: [studentId], references: [id])
  studentId    String     @db.ObjectId

  @@unique([assignmentId, studentId])
}

model Exam {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  title       String
  description String?
  examDate    DateTime?

  teacher     User             @relation("ExamsCreated", fields: [teacherId], references: [id])
  teacherId   String           @db.ObjectId
  group       Group            @relation(fields: [groupId], references: [id])
  groupId     String           @db.ObjectId
  submissions ExamSubmission[]
}

model ExamSubmission {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  content     String?
  submittedAt DateTime?
  grade       Int?
  feedback    String?

  status ExamSubmissionStatus @default(PENDING)

  exam      Exam   @relation(fields: [examId], references: [id], onDelete: Cascade)
  examId    String @db.ObjectId
  student   User   @relation("ExamSubmissionsMade", fields: [studentId], references: [id])
  studentId String @db.ObjectId

  @@unique([examId, studentId])
}

model Enrollment {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  student   User   @relation(fields: [studentId], references: [id])
  studentId String @db.ObjectId

  course   Course @relation(fields: [courseId], references: [id])
  courseId String @db.ObjectId

  progress Int @default(0) // 0–100 percentage

  @@unique([studentId, courseId])
}

model Schedule {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  title       String
  startTime   DateTime
  endTime     DateTime
  date        DateTime

  creator     User      @relation("SchedulesCreated", fields: [creatorId], references: [id])
  creatorId   String    @db.ObjectId

  assignedToTeacher   User?   @relation("SchedulesAssignedToTeacher", fields: [assignedToTeacherId], references: [id])
  assignedToTeacherId String? @db.ObjectId

  assignedToGroup   Group?   @relation("SchedulesAssignedToGroup", fields: [assignedToGroupId], references: [id])
  assignedToGroupId String? @db.ObjectId
}