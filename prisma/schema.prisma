generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

enum Role {
  ADMIN
  HR
  FACULTY
  TEACHER
  STUDENT
}

// ✅ NEW: Added an Enum to track the status of a student's submission
enum SubmissionStatus {
  PENDING   // Student has not submitted yet
  SUBMITTED // Student has submitted, awaiting grading
  GRADED    // Teacher has graded the submission
}

model User {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  firstName String
  lastName  String
  email     String   @unique
  password  String
  role      Role     @default(STUDENT)

  // --- Existing Relationships ---
  groups           Group[]      @relation(fields: [groupIds], references: [id])
  groupIds         String[]     @db.ObjectId
  ledCourses       Course[]     @relation("CourseLead")
  headedDepartment Department?  @relation("DepartmentHead")

  // ✅ NEW: Added relationships for assignments and submissions
  createdAssignments Assignment[] @relation("AssignmentsCreated") // A teacher can create many assignments
  submissions        Submission[] @relation("SubmissionsMade")    // A student can make many submissions
}

model Department {
  id      String  @id @default(auto()) @map("_id") @db.ObjectId
  name    String  @unique
  courses Course[]
  head    User?   @relation("DepartmentHead", fields: [headId], references: [id])
  headId  String? @db.ObjectId @unique
}

model Course {
  id           String     @id @default(auto()) @map("_id") @db.ObjectId
  name         String     @unique
  department   Department @relation(fields: [departmentId], references: [id])
  departmentId String     @db.ObjectId
  groups       Group[]
  teacher      User?      @relation("CourseLead", fields: [teacherId], references: [id])
  teacherId    String?    @db.ObjectId
}

model Group {
  id   String @id @default(auto()) @map("_id") @db.ObjectId
  name String @unique

  course     Course?    @relation(fields: [courseId], references: [id])
  courseId   String?    @db.ObjectId
  students   User[]     @relation(fields: [studentIds], references: [id])
  studentIds String[]   @db.ObjectId

  // ✅ NEW: A group can have many assignments
  assignments Assignment[]
}

// ✅ NEW: Model for Assignments
model Assignment {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  title       String
  description String?
  dueDate     DateTime?

  // --- Relationships ---
  teacher      User         @relation("AssignmentsCreated", fields: [teacherId], references: [id])
  teacherId    String       @db.ObjectId
  group        Group        @relation(fields: [groupId], references: [id])
  groupId      String       @db.ObjectId
  submissions  Submission[]
}

// ✅ NEW: Model for Student Submissions
model Submission {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  content     String? // Where the student's work or a link is stored
  submittedAt DateTime?
  grade       Int?    // The score given by the teacher
  feedback    String? // Comments from the teacher

  status SubmissionStatus @default(PENDING)

  // --- Relationships ---
  assignment   Assignment @relation(fields: [assignmentId], references: [id])
  assignmentId String     @db.ObjectId
  student      User       @relation("SubmissionsMade", fields: [studentId], references: [id])
  studentId    String     @db.ObjectId

  // Ensures a student can only submit once per assignment
  @@unique([assignmentId, studentId])
}